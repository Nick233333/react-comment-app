{"version":3,"sources":["CommentInput.js","Comment.js","CommentList.js","CommentApp.js","index.js"],"names":["CommentInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","content","_loadUsername","event","setState","target","value","props","onSubmit","createdTime","Date","localStorage","getItem","setItem","_saveUsername","_this2","react_default","a","createElement","className","onChange","handleUsernameChange","bind","onBlur","handleUsernameBlur","ref","textarea","handleContentChange","onClick","handleSubmit","Component","Comment","timeString","onDeleteComment","index","_updateTimeString","_timer","setInterval","comment","duration","now","concat","Math","round","max","clearInterval","replace","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","comments","map","i","src_Comment","key","defaultProps","CommentApp","_loadComments","JSON","parse","stringify","alert","push","_saveComments","splice","src_CommentInput","handleSubmitComment","src_CommentList","ReactDOM","render","src_CommentApp","document","getElementById"],"mappings":"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","file":"static/js/main.6c8f1988.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass CommentInput extends Component {\n    static propTypes = {\n        onSubmit: PropTypes.func\n    }\n\n    constructor () {\n        super()\n        this.state = {\n            username: '',\n            content: ''\n        }\n    }\n\n    componentDidMount () {\n        this._loadUsername()\n    }\n\n    handleUsernameChange (event) {\n        this.setState({\n            username: event.target.value\n        })\n    }\n    handleContentChange (event) {\n        this.setState({\n            content: event.target.value\n        })\n    }\n    handleSubmit () {\n        if (this.props.onSubmit) {\n            this.props.onSubmit({\n              username: this.state.username,\n              content: this.state.content,\n              createdTime: +new Date()\n            })\n          }\n        this.setState({ content: '' })\n    }\n\n    _loadUsername () {\n        const username = localStorage.getItem('username')\n        if (username) {\n            this.setState({ username })\n        }\n    }\n\n    _saveUsername (username) {\n        localStorage.setItem('username', username)\n    }\n    \n    handleUsernameBlur (event) {\n        this._saveUsername(event.target.value)\n    }\n\n    render() {\n        return (\n            <div className='comment-input'>\n                <div className='comment-field'>\n                    <span className='comment-field-name'>用户名：</span>\n                    <div className='comment-field-input'>\n                        <input value={this.state.username} onChange={this.handleUsernameChange.bind(this)} onBlur={this.handleUsernameBlur.bind(this)} />\n                    </div>\n                </div>\n                <div className='comment-field'>\n                    <span className='comment-field-name'>评论内容：</span>\n                    <div className='comment-field-input'>\n                    <textarea\n                        ref={(textarea) => this.textarea = textarea}\n                        value={this.state.content}\n                        onChange={this.handleContentChange.bind(this)} />\n                    </div>\n                </div>\n                <div className='comment-field-button'>\n                    <button onClick={this.handleSubmit.bind(this)}>发布</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CommentInput","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Comment extends Component {\n    static propTypes = {\n        comment: PropTypes.object.isRequired,\n        onDeleteComment: PropTypes.func,\n        index: PropTypes.number\n    }\n\n    constructor () {\n        super()\n        this.state = { timeString: '' }\n    }\n\n    handleDeleteComment () {\n        if (this.props.onDeleteComment) {\n            this.props.onDeleteComment(this.props.index)\n        }\n    }\n\n    componentWillMount () {\n        this._updateTimeString()\n        this._timer = setInterval(\n            this._updateTimeString.bind(this),\n            5000\n        )\n    }\n\n    _updateTimeString () {\n        const comment = this.props.comment\n        const duration = (+Date.now() - comment.createdTime) / 1000\n        this.setState({\n          timeString: duration > 60\n            ? `${Math.round(duration / 60)} 分钟前`\n            : `${Math.round(Math.max(duration, 1))} 秒前`\n        })\n    }\n\n    componentWillUnmount () {\n        clearInterval(this._timer)\n    }\n\n    _getProcessedContent (content) {\n        return content\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\")\n        .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\n    }\n\n    render () {\n        return (\n            <div className='comment'>\n                <span className='comment-username'>{this.props.comment.username} </span>：\n                \n                <p dangerouslySetInnerHTML={{\n                __html: this._getProcessedContent(this.props.comment.content)\n                }} />\n                <span className='comment-createdtime'>\n                    {this.state.timeString}\n                </span>\n                <span onClick={this.handleDeleteComment.bind(this)} className='comment-delete'>\n                删除\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default Comment","import React, { Component } from 'react'\nimport Comment from './Comment'\nimport PropTypes from 'prop-types'\n\nclass CommentList extends Component {\n    static propTypes = {\n        comments: PropTypes.array,\n        onDeleteComment: PropTypes.func\n    }\n\n    static defaultProps = {\n        comments: []\n    }\n\n    handleDeleteComment (index) {\n        if (this.props.onDeleteComment) {\n            this.props.onDeleteComment(index)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.comments.map((comment, i) =>\n                    <Comment comment={comment} key={i}\n                    index={i} onDeleteComment={this.handleDeleteComment.bind(this)} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default CommentList","import React, { Component } from 'react'\nimport CommentInput from './CommentInput'\nimport CommentList from './CommentList'\n\nclass CommentApp extends Component {\n    constructor () {\n        super()\n        this.state = {\n            comments: []\n        }\n    }\n    \n    componentWillMount () {\n        this._loadComments()\n    }\n\n    _loadComments () {\n        let comments = localStorage.getItem('comments')\n        if (comments) {\n            comments = JSON.parse(comments)\n            this.setState({ comments })\n        }\n    }\n    \n    _saveComments (comments) {\n        localStorage.setItem('comments', JSON.stringify(comments))\n    }\n    \n    handleSubmitComment (comment) {\n        if (!comment) return\n        if (!comment.username) return alert('请输入用户名')\n        if (!comment.content) return alert('请输入评论内容')\n        const comments = this.state.comments\n        comments.push(comment)\n        this.setState({ comments })\n        this._saveComments(comments)\n    }\n\n    handleDeleteComment (index) {\n        const comments = this.state.comments\n        comments.splice(index, 1)\n        this.setState({ comments })\n        this._saveComments(comments)\n    }\n\n    render() {\n        return (\n            <div className='wrapper'>  \n                <CommentInput onSubmit={this.handleSubmitComment.bind(this)} />\n                <CommentList onDeleteComment={this.handleDeleteComment.bind(this)} comments={this.state.comments} />\n            </div>\n        )\n    }\n}\n\nexport default CommentApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CommentApp from './CommentApp'\nimport './index.css'\n\nReactDOM.render(\n    <CommentApp />,\n    document.getElementById('root')\n)"],"sourceRoot":""}